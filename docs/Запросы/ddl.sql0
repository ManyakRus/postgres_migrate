-- Table: pg_catalog.pg_attribute

-- DROP TABLE IF EXISTS pg_catalog.pg_attribute;

CREATE TABLE IF NOT EXISTS pg_catalog.pg_attribute
(
    attrelid oid NOT NULL,
    attname name COLLATE pg_catalog."C" NOT NULL,
    atttypid oid NOT NULL,
    attstattarget integer NOT NULL,
    attlen smallint NOT NULL,
    attnum smallint NOT NULL,
    attndims integer NOT NULL,
    attcacheoff integer NOT NULL,
    atttypmod integer NOT NULL,
    attbyval boolean NOT NULL,
    attstorage "char" NOT NULL,
    attalign "char" NOT NULL,
    attnotnull boolean NOT NULL,
    atthasdef boolean NOT NULL,
    atthasmissing boolean NOT NULL,
    attidentity "char" NOT NULL,
    attgenerated "char" NOT NULL,
    attisdropped boolean NOT NULL,
    attislocal boolean NOT NULL,
    attinhcount integer NOT NULL,
    attcollation oid NOT NULL,
    attacl aclitem[],
    attoptions text[] COLLATE pg_catalog."C",
    attfdwoptions text[] COLLATE pg_catalog."C",
    attmissingval anyarray
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS pg_catalog.pg_attribute
    OWNER to postgres;

REVOKE ALL ON TABLE pg_catalog.pg_attribute FROM PUBLIC;

GRANT SELECT ON TABLE pg_catalog.pg_attribute TO PUBLIC;

GRANT ALL ON TABLE pg_catalog.pg_attribute TO postgres;
-- Index: pg_attribute_relid_attnam_index

-- DROP INDEX IF EXISTS pg_catalog.pg_attribute_relid_attnam_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_attribute_relid_attnam_index
    ON pg_catalog.pg_attribute USING btree
    (attrelid ASC NULLS LAST, attname COLLATE pg_catalog."C" ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: pg_attribute_relid_attnum_index

-- DROP INDEX IF EXISTS pg_catalog.pg_attribute_relid_attnum_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_attribute_relid_attnum_index
    ON pg_catalog.pg_attribute USING btree
    (attrelid ASC NULLS LAST, attnum ASC NULLS LAST)
    TABLESPACE pg_default;











-- Table: pg_catalog.pg_class

-- DROP TABLE IF EXISTS pg_catalog.pg_class;

CREATE TABLE IF NOT EXISTS pg_catalog.pg_class
(
    oid oid NOT NULL,
    relname name COLLATE pg_catalog."C" NOT NULL,
    relnamespace oid NOT NULL,
    reltype oid NOT NULL,
    reloftype oid NOT NULL,
    relowner oid NOT NULL,
    relam oid NOT NULL,
    relfilenode oid NOT NULL,
    reltablespace oid NOT NULL,
    relpages integer NOT NULL,
    reltuples real NOT NULL,
    relallvisible integer NOT NULL,
    reltoastrelid oid NOT NULL,
    relhasindex boolean NOT NULL,
    relisshared boolean NOT NULL,
    relpersistence "char" NOT NULL,
    relkind "char" NOT NULL,
    relnatts smallint NOT NULL,
    relchecks smallint NOT NULL,
    relhasrules boolean NOT NULL,
    relhastriggers boolean NOT NULL,
    relhassubclass boolean NOT NULL,
    relrowsecurity boolean NOT NULL,
    relforcerowsecurity boolean NOT NULL,
    relispopulated boolean NOT NULL,
    relreplident "char" NOT NULL,
    relispartition boolean NOT NULL,
    relrewrite oid NOT NULL,
    relfrozenxid xid NOT NULL,
    relminmxid xid NOT NULL,
    relacl aclitem[],
    reloptions text[] COLLATE pg_catalog."C",
    relpartbound pg_node_tree COLLATE pg_catalog."C"
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS pg_catalog.pg_class
    OWNER to postgres;

REVOKE ALL ON TABLE pg_catalog.pg_class FROM PUBLIC;

GRANT SELECT ON TABLE pg_catalog.pg_class TO PUBLIC;

GRANT ALL ON TABLE pg_catalog.pg_class TO postgres;
-- Index: pg_class_oid_index

-- DROP INDEX IF EXISTS pg_catalog.pg_class_oid_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_class_oid_index
    ON pg_catalog.pg_class USING btree
    (oid ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: pg_class_relname_nsp_index

-- DROP INDEX IF EXISTS pg_catalog.pg_class_relname_nsp_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_class_relname_nsp_index
    ON pg_catalog.pg_class USING btree
    (relname COLLATE pg_catalog."C" ASC NULLS LAST, relnamespace ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: pg_class_tblspc_relfilenode_index

-- DROP INDEX IF EXISTS pg_catalog.pg_class_tblspc_relfilenode_index;

CREATE INDEX IF NOT EXISTS pg_class_tblspc_relfilenode_index
    ON pg_catalog.pg_class USING btree
    (reltablespace ASC NULLS LAST, relfilenode ASC NULLS LAST)
    TABLESPACE pg_default;








-- Table: pg_catalog.pg_constraint

-- DROP TABLE IF EXISTS pg_catalog.pg_constraint;

CREATE TABLE IF NOT EXISTS pg_catalog.pg_constraint
(
    oid oid NOT NULL,
    conname name COLLATE pg_catalog."C" NOT NULL,
    connamespace oid NOT NULL,
    contype "char" NOT NULL,
    condeferrable boolean NOT NULL,
    condeferred boolean NOT NULL,
    convalidated boolean NOT NULL,
    conrelid oid NOT NULL,
    contypid oid NOT NULL,
    conindid oid NOT NULL,
    conparentid oid NOT NULL,
    confrelid oid NOT NULL,
    confupdtype "char" NOT NULL,
    confdeltype "char" NOT NULL,
    confmatchtype "char" NOT NULL,
    conislocal boolean NOT NULL,
    coninhcount integer NOT NULL,
    connoinherit boolean NOT NULL,
    conkey smallint[],
    confkey smallint[],
    conpfeqop oid[],
    conppeqop oid[],
    conffeqop oid[],
    conexclop oid[],
    conbin pg_node_tree COLLATE pg_catalog."C"
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS pg_catalog.pg_constraint
    OWNER to postgres;

REVOKE ALL ON TABLE pg_catalog.pg_constraint FROM PUBLIC;

GRANT SELECT ON TABLE pg_catalog.pg_constraint TO PUBLIC;

GRANT ALL ON TABLE pg_catalog.pg_constraint TO postgres;
-- Index: pg_constraint_conname_nsp_index

-- DROP INDEX IF EXISTS pg_catalog.pg_constraint_conname_nsp_index;

CREATE INDEX IF NOT EXISTS pg_constraint_conname_nsp_index
    ON pg_catalog.pg_constraint USING btree
    (conname COLLATE pg_catalog."C" ASC NULLS LAST, connamespace ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: pg_constraint_conparentid_index

-- DROP INDEX IF EXISTS pg_catalog.pg_constraint_conparentid_index;

CREATE INDEX IF NOT EXISTS pg_constraint_conparentid_index
    ON pg_catalog.pg_constraint USING btree
    (conparentid ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: pg_constraint_conrelid_contypid_conname_index

-- DROP INDEX IF EXISTS pg_catalog.pg_constraint_conrelid_contypid_conname_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_constraint_conrelid_contypid_conname_index
    ON pg_catalog.pg_constraint USING btree
    (conrelid ASC NULLS LAST, contypid ASC NULLS LAST, conname COLLATE pg_catalog."C" ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: pg_constraint_contypid_index

-- DROP INDEX IF EXISTS pg_catalog.pg_constraint_contypid_index;

CREATE INDEX IF NOT EXISTS pg_constraint_contypid_index
    ON pg_catalog.pg_constraint USING btree
    (contypid ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: pg_constraint_oid_index

-- DROP INDEX IF EXISTS pg_catalog.pg_constraint_oid_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_constraint_oid_index
    ON pg_catalog.pg_constraint USING btree
    (oid ASC NULLS LAST)
    TABLESPACE pg_default;









-- Table: pg_catalog.pg_description

-- DROP TABLE IF EXISTS pg_catalog.pg_description;

CREATE TABLE IF NOT EXISTS pg_catalog.pg_description
(
    objoid oid NOT NULL,
    classoid oid NOT NULL,
    objsubid integer NOT NULL,
    description text COLLATE pg_catalog."C" NOT NULL
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS pg_catalog.pg_description
    OWNER to postgres;

REVOKE ALL ON TABLE pg_catalog.pg_description FROM PUBLIC;

GRANT SELECT ON TABLE pg_catalog.pg_description TO PUBLIC;

GRANT ALL ON TABLE pg_catalog.pg_description TO postgres;
-- Index: pg_description_o_c_o_index

-- DROP INDEX IF EXISTS pg_catalog.pg_description_o_c_o_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_description_o_c_o_index
    ON pg_catalog.pg_description USING btree
    (objoid ASC NULLS LAST, classoid ASC NULLS LAST, objsubid ASC NULLS LAST)
    TABLESPACE pg_default;





-- Table: pg_catalog.pg_index

-- DROP TABLE IF EXISTS pg_catalog.pg_index;

CREATE TABLE IF NOT EXISTS pg_catalog.pg_index
(
    indexrelid oid NOT NULL,
    indrelid oid NOT NULL,
    indnatts smallint NOT NULL,
    indnkeyatts smallint NOT NULL,
    indisunique boolean NOT NULL,
    indisprimary boolean NOT NULL,
    indisexclusion boolean NOT NULL,
    indimmediate boolean NOT NULL,
    indisclustered boolean NOT NULL,
    indisvalid boolean NOT NULL,
    indcheckxmin boolean NOT NULL,
    indisready boolean NOT NULL,
    indislive boolean NOT NULL,
    indisreplident boolean NOT NULL,
    indkey int2vector NOT NULL,
    indcollation oidvector NOT NULL,
    indclass oidvector NOT NULL,
    indoption int2vector NOT NULL,
    indexprs pg_node_tree COLLATE pg_catalog."C",
    indpred pg_node_tree COLLATE pg_catalog."C"
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS pg_catalog.pg_index
    OWNER to postgres;

REVOKE ALL ON TABLE pg_catalog.pg_index FROM PUBLIC;

GRANT SELECT ON TABLE pg_catalog.pg_index TO PUBLIC;

GRANT ALL ON TABLE pg_catalog.pg_index TO postgres;
-- Index: pg_index_indexrelid_index

-- DROP INDEX IF EXISTS pg_catalog.pg_index_indexrelid_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_index_indexrelid_index
    ON pg_catalog.pg_index USING btree
    (indexrelid ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: pg_index_indrelid_index

-- DROP INDEX IF EXISTS pg_catalog.pg_index_indrelid_index;

CREATE INDEX IF NOT EXISTS pg_index_indrelid_index
    ON pg_catalog.pg_index USING btree
    (indrelid ASC NULLS LAST)
    TABLESPACE pg_default;











-- Table: pg_catalog.pg_namespace

-- DROP TABLE IF EXISTS pg_catalog.pg_namespace;

CREATE TABLE IF NOT EXISTS pg_catalog.pg_namespace
(
    oid oid NOT NULL,
    nspname name COLLATE pg_catalog."C" NOT NULL,
    nspowner oid NOT NULL,
    nspacl aclitem[]
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS pg_catalog.pg_namespace
    OWNER to postgres;

REVOKE ALL ON TABLE pg_catalog.pg_namespace FROM PUBLIC;

GRANT SELECT ON TABLE pg_catalog.pg_namespace TO PUBLIC;

GRANT ALL ON TABLE pg_catalog.pg_namespace TO postgres;
-- Index: pg_namespace_nspname_index

-- DROP INDEX IF EXISTS pg_catalog.pg_namespace_nspname_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_namespace_nspname_index
    ON pg_catalog.pg_namespace USING btree
    (nspname COLLATE pg_catalog."C" ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: pg_namespace_oid_index

-- DROP INDEX IF EXISTS pg_catalog.pg_namespace_oid_index;

CREATE UNIQUE INDEX IF NOT EXISTS pg_namespace_oid_index
    ON pg_catalog.pg_namespace USING btree
    (oid ASC NULLS LAST)
    TABLESPACE pg_default;
